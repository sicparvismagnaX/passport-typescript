name: CICD

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: false
  push:
    tags:
      - v* 
    branches:
      - '*'

env:
  AWS_REGION: ap-southeast-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: sssm-backend-server-app           # set this to your Amazon ECR repository name
  ECS_CLUSTER: sssm-backend-server-app-cluster                 # set this to your Amazon ECS cluster name
  ECS_BACKEND_SERVICE: sssm-backend-server-app-service                # set this to your Amazon ECS service name
  ECS_AUDIT_CRON_SERVICE: audit-cron-service
  ECS_NOTI_CRON_SERVICE: noti-cron-service
  ECS_BACKEND_APP_TASK_DEFINITION: .github/workflows/ecs/sssm-app-task-definition.json
  ECS_NOTI_CRON_TASK_DEFINITION: .github/workflows/ecs/line-notification-cron-definition.json
  ECS_AUDIT_CRON_TASK_DEFINITION: .github/workflows/ecs/audit-cron-definition.json
  CONTAINER_NAME: sssm-backend-server-app
  DEV_IMAGE_TAG: latest  #${{ github.sha }}
  IMAGE_TAG: ${{ github.ref_name }}

jobs:
  setup-packages:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
          node-version: '16'
    - uses: actions/cache@v3
      with:
        path: |
            **/node_modules
        key: node_modules-${{github.sha}}
    - run: echo "${{ github.event_name }}"
    - name: install package
      if: github.event.inputs.environment == 'develop'
      run: npm install
    # - name: install package 2
    #   if: github.ref_type == 'tag' && contains(github.ref_name, 'v')
    #   run: echo ${{IMAGE_TAG}}
    - run: echo ${GITHUB_REF#refs/*/}
    - run: echo ${{env.IMAGE_TAG}}
  temp:
    runs-on: ubuntu-latest
    if: |
      (github.ref_type == 'tag' && contains(github.ref_name, 'v')) || 
      (github.event_name == 'workflow_dispatch')
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: get changes
      run: echo "GITDIFF=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})" >> $GITHUB_ENV
    - run: echo $GITDIFF
    - run: echo ${{ env.IMAGE_TAG }}
  # tomp:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       fetch-depth: 0
  #   - name: get changes
  #     run: echo "GITDIFF=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})" >> $GITHUB_ENV
  #   - run: echo $GITDIFF
  #   - run: echo ${{ env.GITDIFF }}
  build:
    runs-on: ubuntu-latest
    needs: setup-packages
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
          node-version: '16'
    - uses: actions/cache@v3
      id: cache-npm
      with:
        path: |
            **/node_modules
        key: node_modules-${{github.sha}}
    - if: ${{ steps.cache-npm.outputs.cache-hit != 'true'}}
      name: handle module download when cache miss
      continue-on-error: false
      run: npm install
    - name: build
      run: echo build something

  test-env-with-tag-if:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_type == 'tag' && contains(github.ref_name, 'v')
    environment:
      name: ecsprod
    steps:
    - uses: actions/checkout@v3
    - run: echo using the step

  test:
    runs-on: ubuntu-latest
    needs: setup-packages
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: cache-npm
      with:
        path: |
            **/node_modules
        key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}-${{ steps.node.outputs.version }}
    - name: handle module download when cache miss
      if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
      run: npm install
    - name: run ls
      env:
        RUNNER_CONTEXT: steps.cache-npm.ouputs.cache-hit
      run: echo "$RUNNER_CONTEXT"
  
  temp-push-img:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: cache-npm
      with:
        path: |
            **/node_modules
        key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}-${{ steps.node.outputs.version }}
    - if: ${{ steps.cache-npm.ouputs.cache-hit != 'true'}}
      name: handle module download when cache miss
      continue-on-error: false
      run: npm install
    - name: run ls
      run: echo image is pushed
  
  push-sssm-app-server-image:
    if: (github.ref_type == 'tag' && contains(github.ref_name, 'v'))
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: run ls
      run: ls